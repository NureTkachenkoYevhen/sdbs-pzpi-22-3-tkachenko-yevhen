{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    films: [],\n    actors: [],\n    add: null,\n    allActors: [],\n    actorsParticipate: [],\n    film: {}\n  },\n  getters: {\n    getFilms(state) {\n      return state.films;\n    },\n    getActors(state) {\n      return state.actors;\n    },\n    getAllActors(state) {\n      return state.allActors;\n    },\n    getActorsParticipate(state) {\n      return state.actorsParticipate;\n    },\n    getFilm(state) {\n      return state.actorsParticipate;\n    }\n  },\n  mutations: {\n    setFilms(state, payload) {\n      state.films = payload;\n    },\n    setActors(state, payload) {\n      state.actors = payload;\n    },\n    setAdd(state, payload) {\n      state.add = payload;\n    },\n    setAllActors(state, payload) {\n      state.allActors = payload;\n    },\n    setActorsParticipate(state, payload) {\n      state.actorsParticipate = payload;\n    },\n    setFilm(state) {\n      state.actorsParticipate = payload;\n    }\n  },\n  actions: {\n    async getFilms({\n      commit\n    }) {\n      const response = await fetch(`http://127.0.0.1:8080/films`, {\n        method: 'GET'\n      });\n      let res = await response.json();\n      commit('setFilms', res);\n    },\n    async getActors({\n      commit\n    }, payload) {\n      const response = await fetch(`http://127.0.0.1:8080/actors?filmId=${payload.filmId}`, {\n        method: 'GET'\n      });\n      let res = await response.json();\n      commit('setActors', res);\n    },\n    async getAllActors({\n      commit\n    }) {\n      const response = await fetch(`http://127.0.0.1:8080/actors`, {\n        method: 'GET'\n      });\n      let res = await response.json();\n      commit('setAllActors', res);\n    },\n    async addNew({\n      commit\n    }, payload) {\n      const response = await fetch(`http://127.0.0.1:8080/films`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          actorId: payload.actorId,\n          feeNum: payload.feeNum,\n          filmName: payload.name,\n          filmingPercentage: payload.percentage,\n          genre: payload.genre,\n          duration: payload.duration,\n          rating: payload.rating,\n          budgetNum: payload.budget,\n          boxOfficeNum: payload.box_office,\n          filmDate: payload.date\n        })\n      });\n      let res = await response.json();\n      if (res.error) {\n        alert(res.error);\n      } else {\n        alert(\"Film added succesfully\");\n        commit('setAdd', 1);\n      }\n    },\n    async getActorsParticipate({\n      commit\n    }) {\n      const response = await fetch(`http://127.0.0.1:8080/actors-participate`, {\n        method: 'GET'\n      });\n      let res = await response.json();\n      console.log(res[0].actor);\n      commit('setActorsParticipate', res);\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","state","films","actors","add","allActors","actorsParticipate","film","getters","getFilms","getActors","getAllActors","getActorsParticipate","getFilm","mutations","setFilms","payload","setActors","setAdd","setAllActors","setActorsParticipate","setFilm","actions","commit","response","fetch","method","res","json","filmId","addNew","headers","body","JSON","stringify","actorId","feeNum","filmName","name","filmingPercentage","percentage","genre","duration","rating","budgetNum","budget","boxOfficeNum","box_office","filmDate","date","error","alert","console","log","actor","modules"],"sources":["E:/ХНУРЕ/3 курс/СРБД/yevhen.tkachenko.sdbs.vue/sdbs-lab3/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n    films:[],\n    actors:[],\n    add:null,\n    allActors:[],\n    actorsParticipate:[],\n    film:{}\n  },\n  getters: {\n    getFilms(state){\n      return state.films\n    },\n    getActors(state){\n      return state.actors\n    },\n    getAllActors(state){\n      return state.allActors\n    },\n    getActorsParticipate(state){\n      return state.actorsParticipate\n    },\n    getFilm(state){\n      return state.actorsParticipate\n    },\n  },\n  mutations: {\n    setFilms(state,payload){\n      state.films = payload\n    },\n    setActors(state,payload){\n      state.actors = payload\n    },\n    setAdd(state,payload){\n      state.add = payload\n    },\n    setAllActors(state,payload){\n      state.allActors = payload\n    },\n    setActorsParticipate(state,payload){\n      state.actorsParticipate = payload\n    },\n    setFilm(state){\n      state.actorsParticipate = payload\n    },\n  },\n  actions: {\n    async getFilms({ commit }) {\n      const response = await fetch(`http://127.0.0.1:8080/films`, {\n              method: 'GET',\n            });\n            let res = await response.json()\n            commit('setFilms',res)\n    },\n    async getActors({ commit },payload) {\n      const response = await fetch(`http://127.0.0.1:8080/actors?filmId=${payload.filmId}`, {\n              method: 'GET',\n            });\n            let res = await response.json()\n            commit('setActors',res)\n    },\n    async getAllActors({ commit }) {\n      const response = await fetch(`http://127.0.0.1:8080/actors`, {\n              method: 'GET',\n            });\n            let res = await response.json()\n            commit('setAllActors',res)\n    },\n    async addNew({commit},payload) {\n\n      const response = await fetch(`http://127.0.0.1:8080/films`, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n                actorId:payload.actorId,\n                feeNum:payload.feeNum,\n                filmName:payload.name,\n                filmingPercentage:payload.percentage,\n                genre:payload.genre,\n                duration:payload.duration,\n                rating:payload.rating,\n                budgetNum:payload.budget,\n                boxOfficeNum:payload.box_office,\n                filmDate:payload.date,\n              }),\n            });\n            let res = await response.json()\n            if(res.error){\n              alert(res.error)\n            }else{\n              alert(\"Film added succesfully\")\n              commit('setAdd',1)\n            }\n    },\n    async getActorsParticipate({ commit }) {\n      const response = await fetch(`http://127.0.0.1:8080/actors-participate`, {\n              method: 'GET',\n            });\n            let res = await response.json()\n            console.log(res[0].actor)\n            commit('setActorsParticipate',res)\n    },\n  },\n  modules: {\n  }\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}